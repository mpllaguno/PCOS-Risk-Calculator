# -*- coding: utf-8 -*-
"""pcos_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cmixq8CxVTngE7sczgDcsNscjQgY6O3r

## **Risk Calculator: Web App Deployment**

1.   Upload the files in a Github repository.
2.   Open [Streamlit Cloud](https://share.streamlit.io/) and click "Create App".
3.   Fill out the necessary details and deploy the app.
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib

lr_model = joblib.load('lr_model.pkl')
scaler = joblib.load('scaler.pkl')
pca = joblib.load('pca.pkl')
feature_names = joblib.load('feature_names.pkl')

X = pd.read_csv('PCOS_data.csv')
X = X[feature_names]

X.fillna(X.mode().iloc[0], inplace=True)
X.fillna(X.mean(numeric_only=True), inplace=True)

mean_values = X.mean(numeric_only=True)
mode_values = X.mode().iloc[0]

feature_mappings = {
    'BMI': 'BMI',
    'Pulse Rate (bpm)': 'Pulse Rate (bpm)',
    'RBS (mg/dl)': 'RBS (mg/dl)',
    'Follicle Count (Right)': 'Follicle No. (R)',
    'Follicle Count (Left)': 'Follicle No. (L)',
    'Average Follicle Size (mm)': 'Avg. F size (R) (mm)',
    'Endometrium Thickness (mm)': 'Endometrium (mm)',
    'LH (mIU/mL)': 'LH (mIU/mL)',
    'TSH (mIU/L)': 'TSH (mIU/L)',
    'AMH (ng/mL)': 'AMH (ng/mL)',
    'PRL (ng/mL)': 'PRL (ng/mL)',
    'Vitamin D3 (ng/mL)': 'Vit D3 (ng/mL)',
    'Do you have a regular menstrual cycle?': 'Cycle (R/I)',
    'Do you experience weight gain?': 'Weight Gain (Y/N)',
    'Do you experience acne breakouts?': 'Pimples (Y/N)',
    'Do you experience skin hyperpigmentation?': 'Skin Darkening  (Y/N)',
    'Do you experience hirsutism (excessive hair growth)?': 'Hair Growth (Y/N)',
    'Do you experience androgenic alopecia (male pattern baldness)?': 'Hair Loss (Y/N)',
    'Do you exercise regularly?': 'Reg. Exercise (Y/N)',
    'Do you consume fast food?': 'Fast Food (Y/N)',


}

categorical_map = {
    'Weight Gain (Y/N)': (1, 0),
    'Skin Darkening  (Y/N)': (1, 0),
    'Hair Growth (Y/N)': (1, 0),
    'Cycle (R/I)': (4, 2),
    'Pimples (Y/N)': (1, 0),
    'Fast Food (Y/N)': (1, 0),
    'Hair Loss (Y/N)': (1, 0),
    'Reg. Exercise (Y/N)': (1, 0),
}

st.title("PCOS Risk Assessment")

st.markdown("### Please provide the following information:")
st.markdown("#### Leave the section blank if the information is unknown.")

input_dict = {}

for user_label, model_feature in feature_mappings.items():
    if model_feature in categorical_map:
        user_input = st.selectbox(user_label, ["", "Yes", "No"])
        if user_input == "Yes":
            input_dict[model_feature] = categorical_map[model_feature][0]
        elif user_input == "No":
            input_dict[model_feature] = categorical_map[model_feature][1]
        else:
            input_dict[model_feature] = mode_values[model_feature]
    elif model_feature == 'Cycle (R/I)':
        user_input = st.selectbox(user_label, ["", "Yes", "No"])
        if user_input == "Yes":
            input_dict[model_feature] = 4
        elif user_input == "No":
            input_dict[model_feature] = 2
        else:
            input_dict[model_feature] = mode_values[model_feature]
    else:
        user_input = st.text_input(user_label)
        if user_input:
            try:
                input_dict[model_feature] = float(user_input)
            except ValueError:
                st.error(f"Invalid input for {user_label}. Please enter a numeric value.")
                st.stop()
        else:
            if model_feature in mean_values:
                input_dict[model_feature] = mean_values[model_feature]
            else:
                input_dict[model_feature] = mode_values[model_feature]

for feature in X.columns:
    if feature not in input_dict:
        if feature in mean_values:
            input_dict[feature] = mean_values[feature]
        else:
            input_dict[feature] = mode_values[feature]

if st.button("Estimate PCOS Risk"):
    input_df = pd.DataFrame([input_dict])
    input_df = input_df.reindex(columns=feature_names) 
    input_scaled = scaler.transform(input_df)
    input_pca = pca.transform(input_scaled)
    predicted_proba = lr_model.predict_proba(input_pca)[:, 1][0]
    risk = predicted_proba * 100

    st.markdown(f"### Estimated PCOS Risk: **{risk:.2f}%**")

    if predicted_proba <= 0.2:
        st.success("Low Risk of PCOS")
    elif predicted_proba >= 0.8:
        st.error("High Risk of PCOS")
    else:
        st.warning("Moderate Risk of PCOS")
